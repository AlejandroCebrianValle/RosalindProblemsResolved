## Binary search
## Recursive Function to Fibonacci sequence
recursiveFibonacciSequence <- function(n){
if(n == 0) {
return(0)
}
if(n == 1) {
return(1)
}
else {
return(recursiveFibonacciSequence(n-1) + recursiveFibonacciSequence(n-2))
}
}
## Dynamic Programation
dynamicPFibonacciSequence <- function(n){
fArray <- c(0, 1)
for (i in 2:(n + 1)){
fArray <- append(fArray, (fArray[i - 2] + fArray[i - 1]));
}
return(fArray[n + 1])
}
## Matrix calculus
matrixFibonacciSeq <- function(n){
fMatrix <- matrix(c(1,1,1,0), nrow = 2, ncol = 2);
if (n == 0){
return(0)
} else {
mMatrix <- matrix(c(1,1,1,0), nrow = 2, ncol = 2);
for (i in 2:n-2){
fMatrix <- fMatrix %*% mMatrix;
}
return(fMatrix[1][1])
}
}
## Probe Section
recursiveFibonacciSequence(9) # 34
recursiveFibonacciSequence(22) # 17711
dynamicPFibonacciSequence(9) # 34
dynamicPFibonacciSequence(22) # 17711
matrixFibonacciSeq(9) # 34
matrixFibonacciSeq(22) # 17711
## Binary search
## Recursive Function to Fibonacci sequence
recursiveFibonacciSequence <- function(n){
if(n == 0) {
return(0)
}
if(n == 1) {
return(1)
}
else {
return(recursiveFibonacciSequence(n-1) + recursiveFibonacciSequence(n-2))
}
}
## Dynamic Programation
dynamicPFibonacciSequence <- function(n){
fArray <- c(0, 1)
for (i in 2:(n + 1)){
fArray <- append(fArray, (fArray[i - 2] + fArray[i - 1]));
}
return(fArray[n + 1])
}
## Matrix calculus
matrixFibonacciSeq <- function(n){
fMatrix <- matrix(c(1,1,1,0), nrow = 2, ncol = 2);
if (n == 0){
return(0)
} else {
mMatrix <- matrix(c(1,1,1,0), nrow = 2, ncol = 2);
for (i in 2:n-2){
fMatrix <- fMatrix %*% mMatrix;
}
return(fMatrix[1][1])
}
}
## Probe Section
recursiveFibonacciSequence(9) # 34
recursiveFibonacciSequence(22) # 17711
dynamicPFibonacciSequence(9) # 34
dynamicPFibonacciSequence(22) # 17711
matrixFibonacciSeq(9) # 34
matrixFibonacciSeq(22) # 17711
## Binary search
## Recursive Function to Fibonacci sequence
recursiveFibonacciSequence <- function(n){
if(n == 0) {
return(0)
}
if(n == 1) {
return(1)
}
else {
return(recursiveFibonacciSequence(n-1) + recursiveFibonacciSequence(n-2))
}
}
## Dynamic Programation
dynamicPFibonacciSequence <- function(n){
fArray <- c(0, 1)
for (i in 2:(n + 1)){
fArray <- append(fArray, (fArray[i - 2] + fArray[i - 1]));
}
return(fArray[n + 1])
}
## Matrix calculus
matrixFibonacciSeq <- function(n){
fMatrix <- matrix(c(1,1,1,0), nrow = 2, ncol = 2);
if (n == 0){
return(0)
} else {
mMatrix <- matrix(c(1,1,1,0), nrow = 2, ncol = 2);
for (i in 2:n-2){
fMatrix <- fMatrix %*% mMatrix;
}
print(fMatrix);
return(fMatrix[1][1])
}
}
## Probe Section
recursiveFibonacciSequence(9) # 34
recursiveFibonacciSequence(22) # 17711
dynamicPFibonacciSequence(9) # 34
dynamicPFibonacciSequence(22) # 17711
matrixFibonacciSeq(9) # 34
matrixFibonacciSeq(22) # 17711
## Binary search
## Recursive Function to Fibonacci sequence
recursiveFibonacciSequence <- function(n){
if(n == 0) {
return(0)
}
if(n == 1) {
return(1)
}
else {
return(recursiveFibonacciSequence(n-1) + recursiveFibonacciSequence(n-2))
}
}
## Dynamic Programation
dynamicPFibonacciSequence <- function(n){
fArray <- c(0, 1)
for (i in 2:(n + 1)){
fArray <- append(fArray, (fArray[i - 2] + fArray[i - 1]));
}
return(fArray[n + 1])
}
## Matrix calculus
matrixFibonacciSeq <- function(n){
fMatrix <- matrix(c(1,1,1,0), nrow = 2, ncol = 2);
if (n == 0){
return(0)
} else {
mMatrix <- matrix(c(1,1,1,0), nrow = 2, ncol = 2);
for (i in 0:n-2){
fMatrix <- fMatrix %*% mMatrix;
}
print(fMatrix);
return(fMatrix[1][1])
}
}
## Probe Section
recursiveFibonacciSequence(9) # 34
recursiveFibonacciSequence(22) # 17711
dynamicPFibonacciSequence(9) # 34
dynamicPFibonacciSequence(22) # 17711
matrixFibonacciSeq(9) # 34
matrixFibonacciSeq(22) # 17711
## Recursive Function to Fibonacci sequence
recursiveFibonacciSequence <- function(n){
if(n == 0) {
return(0)
}
if(n == 1) {
return(1)
}
else {
return(recursiveFibonacciSequence(n-1) + recursiveFibonacciSequence(n-2))
}
}
## Dynamic Programation
dynamicPFibonacciSequence <- function(n){
fArray <- c(0, 1)
for (i in 2:(n + 1)){
fArray <- append(fArray, (fArray[i - 2] + fArray[i - 1]));
}
return(fArray[n + 1])
}
## Matrix calculus
matrixFibonacciSeq <- function(n){
fMatrix <- matrix(c(1,1,1,0), nrow = 2, ncol = 2);
if (n == 0){
return(0)
} else {
mMatrix <- matrix(c(1,1,1,0), nrow = 2, ncol = 2);
for (i in 0:n-2){
fMatrix <- fMatrix %*% mMatrix;
}
print(fMatrix);
return(fMatrix[1][1])
}
}
## Probe Section
recursiveFibonacciSequence(9) # 34
recursiveFibonacciSequence(22) # 17711
dynamicPFibonacciSequence(9) # 34
dynamicPFibonacciSequence(22) # 17711
matrixFibonacciSeq(9) # 34
matrixFibonacciSeq(22) # 17711
## Recursive Function to Fibonacci sequence
recursiveFibonacciSequence <- function(n){
if(n == 0) {
return(0)
}
if(n == 1) {
return(1)
}
else {
return(recursiveFibonacciSequence(n-1) + recursiveFibonacciSequence(n-2))
}
}
## Dynamic Programation
dynamicPFibonacciSequence <- function(n){
fArray <- c(0, 1)
for (i in 2:(n + 1)){
fArray <- append(fArray, (fArray[i - 2] + fArray[i - 1]));
}
return(fArray[n + 1])
}
## Matrix calculus
matrixFibonacciSeq <- function(n){
fMatrix <- matrix(c(1,1,1,0), nrow = 2, ncol = 2);
if (n == 0){
return(0)
} else {
mMatrix <- matrix(c(1,1,1,0), nrow = 2, ncol = 2);
for (i in 2:n-3){
fMatrix <- fMatrix %*% mMatrix;
}
print(fMatrix);
return(fMatrix[1][1])
}
}
## Probe Section
recursiveFibonacciSequence(9) # 34
recursiveFibonacciSequence(22) # 17711
dynamicPFibonacciSequence(9) # 34
dynamicPFibonacciSequence(22) # 17711
matrixFibonacciSeq(9) # 34
matrixFibonacciSeq(22) # 17711
## Recursive Function to Fibonacci sequence
recursiveFibonacciSequence <- function(n){
if(n == 0) {
return(0)
}
if(n == 1) {
return(1)
}
else {
return(recursiveFibonacciSequence(n-1) + recursiveFibonacciSequence(n-2))
}
}
## Dynamic Programation
dynamicPFibonacciSequence <- function(n){
fArray <- c(0, 1)
for (i in 2:(n + 1)){
fArray <- append(fArray, (fArray[i - 2] + fArray[i - 1]));
}
return(fArray[n + 1])
}
## Matrix calculus
matrixFibonacciSeq <- function(n){
fMatrix <- matrix(c(1,1,1,0), nrow = 2, ncol = 2);
if (n == 0){
return(0)
} else {
mMatrix <- matrix(c(1,1,1,0), nrow = 2, ncol = 2);
for (i in 2:n-3){
fMatrix <- fMatrix %*% mMatrix;
}
print(fMatrix);
return(fMatrix[1][1])
}
}
## Probe Section
recursiveFibonacciSequence(9) # 34
recursiveFibonacciSequence(22) # 17711
dynamicPFibonacciSequence(9) # 34
dynamicPFibonacciSequence(22) # 17711
matrixFibonacciSeq(9) # 34
matrixFibonacciSeq(22) # 17711
## Recursive Function to Fibonacci sequence
recursiveFibonacciSequence <- function(n){
if(n == 0) {
return(0)
}
if(n == 1) {
return(1)
}
else {
return(recursiveFibonacciSequence(n-1) + recursiveFibonacciSequence(n-2))
}
}
## Dynamic Programation
dynamicPFibonacciSequence <- function(n){
fArray <- c(0, 1)
for (i in 2:(n + 1)){
fArray <- append(fArray, (fArray[i - 2] + fArray[i - 1]));
}
return(fArray[n + 1])
}
## Matrix calculus
matrixFibonacciSeq <- function(n){
fMatrix <- matrix(c(1,1,1,0), nrow = 2, ncol = 2);
if (n == 0){
return(0)
} else {
mMatrix <- matrix(c(1,1,1,0), nrow = 2, ncol = 2);
for (i in 2:n){
fMatrix <- fMatrix %*% mMatrix;
}
print(fMatrix);
return(fMatrix[1][1])
}
}
## Probe Section
recursiveFibonacciSequence(9) # 34
recursiveFibonacciSequence(22) # 17711
dynamicPFibonacciSequence(9) # 34
dynamicPFibonacciSequence(22) # 17711
matrixFibonacciSeq(9) # 34
matrixFibonacciSeq(22) # 17711
## Recursive Function to Fibonacci sequence
recursiveFibonacciSequence <- function(n){
if(n == 0) {
return(0)
}
if(n == 1) {
return(1)
}
else {
return(recursiveFibonacciSequence(n-1) + recursiveFibonacciSequence(n-2))
}
}
## Dynamic Programation
dynamicPFibonacciSequence <- function(n){
fArray <- c(0, 1)
for (i in 2:(n + 1)){
fArray <- append(fArray, (fArray[i - 2] + fArray[i - 1]));
}
return(fArray[n + 1])
}
## Matrix calculus
matrixFibonacciSeq <- function(n){
fMatrix <- matrix(c(1,1,1,0), nrow = 2, ncol = 2);
if (n == 0){
return(0)
} else {
mMatrix <- matrix(c(1,1,1,0), nrow = 2, ncol = 2);
for (i in 2:(n - 1)){
fMatrix <- fMatrix %*% mMatrix;
}
print(fMatrix);
return(fMatrix[1][1])
}
}
## Probe Section
recursiveFibonacciSequence(9) # 34
recursiveFibonacciSequence(22) # 17711
dynamicPFibonacciSequence(9) # 34
dynamicPFibonacciSequence(22) # 17711
matrixFibonacciSeq(9) # 34
matrixFibonacciSeq(22) # 17711
## Binary search
## Recursive Function to Fibonacci sequence
recursiveFibonacciSequence <- function(n){
if(n == 0) {
return(0)
}
if(n == 1) {
return(1)
}
else {
return(recursiveFibonacciSequence(n-1) + recursiveFibonacciSequence(n-2))
}
}
## Dynamic Programation
dynamicPFibonacciSequence <- function(n){
fArray <- c(0, 1)
for (i in 2:(n + 1)){
fArray <- append(fArray, (fArray[i - 2] + fArray[i - 1]));
}
return(fArray[n + 1])
}
## Matrix calculus
matrixFibonacciSeq <- function(n){
fMatrix <- matrix(c(1,1,1,0), nrow = 2, ncol = 2);
if (n == 0){
return(0)
} else {
mMatrix <- matrix(c(1,1,1,0), nrow = 2, ncol = 2);
for (i in 2:(n - 1)){
fMatrix <- fMatrix %*% mMatrix;
}
print(fMatrix);
return(fMatrix[1][1])
}
}
## Probe Section
recursiveFibonacciSequence(9) # 34
recursiveFibonacciSequence(22) # 17711
dynamicPFibonacciSequence(9) # 34
dynamicPFibonacciSequence(22) # 17711
matrixFibonacciSeq(9) # 34
matrixFibonacciSeq(22) # 17711
## Binary search
print(recursiveFibonacciSeq(9), recursiveFibonacciSeq(22))
print(dynamicPFibonacciSeq(9), dynamicPFibonacciSeq(22))
print(matrixFibonacciSeq(9), matrixFibonacciSeq(22))
print(recursiveFibonacciSeq(9), recursiveFibonacciSeq(22))
print(dynamicPFibonacciSequence(9), dynamicPFibonacciSequence(22))
print(matrixFibonacciSeq(9), matrixFibonacciSeq(22))
## Recursive Function to Fibonacci sequence
recursiveFibonacciSequence <- function(n){
if(n == 0) {
return(0)
}
if(n == 1) {
return(1)
}
else {
return(recursiveFibonacciSequence(n-1) + recursiveFibonacciSequence(n-2))
}
}
## Dynamic Programation
dynamicPFibonacciSequence <- function(n){
fArray <- c(0, 1)
for (i in 2:(n + 1)){
fArray <- append(fArray, (fArray[i - 2] + fArray[i - 1]));
}
return(fArray[n + 1])
}
## Matrix calculus
matrixFibonacciSeq <- function(n){
fMatrix <- matrix(c(1,1,1,0), nrow = 2, ncol = 2);
if (n == 0){
return(0)
} else {
mMatrix <- matrix(c(1,1,1,0), nrow = 2, ncol = 2);
for (i in 2:(n - 1)){
fMatrix <- fMatrix %*% mMatrix;
}
return(fMatrix[1][1])
}
}
## Probe Section
print(recursiveFibonacciSeq(9), recursiveFibonacciSeq(22))
print(dynamicPFibonacciSequence(9), dynamicPFibonacciSequence(22))
print(matrixFibonacciSeq(9), matrixFibonacciSeq(22))
## Recursive Function to Fibonacci sequence
recursiveFibonacciSequence <- function(n){
if(n == 0) {
return(0)
}
if(n == 1) {
return(1)
}
else {
return(recursiveFibonacciSequence(n-1) + recursiveFibonacciSequence(n-2))
}
}
## Dynamic Programation
dynamicPFibonacciSequence <- function(n){
fArray <- c(0, 1)
for (i in 2:(n + 1)){
fArray <- append(fArray, (fArray[i - 2] + fArray[i - 1]));
}
return(fArray[n + 1])
}
## Matrix calculus
matrixFibonacciSeq <- function(n){
fMatrix <- matrix(c(1,1,1,0), nrow = 2, ncol = 2);
if (n == 0){
return(0)
} else {
mMatrix <- matrix(c(1,1,1,0), nrow = 2, ncol = 2);
for (i in 2:(n - 1)){
fMatrix <- fMatrix %*% mMatrix;
}
return(fMatrix[1][1])
}
}
## Probe Section
recursiveFibonacciSequence(9) # 34
recursiveFibonacciSequence(22) # 17711
dynamicPFibonacciSequence(9) # 34
dynamicPFibonacciSequence(22) # 17711
matrixFibonacciSeq(9) # 34
matrixFibonacciSeq(22) # 17711
## Binary search
## Probe Section
cat(sprintf("%d\t%d", recursiveFibonacciSequence(9), recursiveFibonacciSequence(22)))
cat(sprintf("Recusive:\t%d\t%d", recursiveFibonacciSequence(9),
recursiveFibonacciSequence(22)))
cat(sprintf("Dynamic Programation:\t%d\t%d", dynamicPFibonacciSequence(9),
dynamicPFibonacciSequence(22)))
cat(sprintf("Matrix:\t%d\t%d", matrixFibonacciSeq(9),
matrixFibonacciSeq(22)))
cat(sprintf("Recusive:\t%d\t%d\n", recursiveFibonacciSequence(9),
recursiveFibonacciSequence(22)))
cat(sprintf("Dynamic Programation:\t%d\t%d\n", dynamicPFibonacciSequence(9),
dynamicPFibonacciSequence(22)))
cat(sprintf("Matrix:\t%d\t%d\n", matrixFibonacciSeq(9),
matrixFibonacciSeq(22)))
